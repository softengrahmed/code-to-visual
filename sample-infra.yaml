team: DevOps
service: websocket-app
environment: dev
region: us-east-1
tags:
  owner: dave_johnson
  project: WebSocketApplicationPlatform

aws_resources:
  - name: s3-webapp
    type: s3.Bucket
    args:
      website:
        index_document: index.html
      tags:
        Name: Web App UI

  - name: cloudfront-oai
    type: cloudfront.OriginAccessIdentity
    args:
      comment: OAI for WebSocket Application

  - name: cloudfront
    type: cloudfront.Distribution
    args:
      origins:
        - origin_id: s3Origin
          domain_name: ref:s3-webapp.bucket_regional_domain_name
          s3_origin_config:
            origin_access_identity: ref:cloudfront-oai.cloudfront_access_identity_path
      enabled: true
      default_root_object: index.html
      default_cache_behavior:
        target_origin_id: s3Origin
        viewer_protocol_policy: redirect-to-https
        allowed_methods: [GET, HEAD, OPTIONS]
        cached_methods: [GET, HEAD]
        forwarded_values:
          query_string: false
          cookies:
            forward: none
      restrictions:
        geo_restriction:
          restriction_type: none
      price_class: PriceClass_100
      viewer_certificate:
        cloudfront_default_certificate: true

  - name: s3-webapp-policy
    type: s3.BucketPolicy
    args:
      bucket: ref:s3-webapp.id
      policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: ref:cloudfront-oai.iam_arn
            Action: s3:GetObject
            Resource: "${ref:s3-webapp.arn}/*"

  - name: cognito-user-pool
    type: cognito.UserPool
    args:
      name: websocket-app-user-pool
      auto_verified_attributes: [email]
      password_policy:
        minimum_length: 8
        require_lowercase: true
        require_numbers: true
        require_symbols: true
        require_uppercase: true
      tags:
        Name: WebSocket App User Pool

  - name: cognito-client
    type: cognito.UserPoolClient
    args:
      user_pool_id: ref:cognito-user-pool.id
      name: websocket-app-client
      generate_secret: false
      explicit_auth_flows: [ALLOW_USER_PASSWORD_AUTH, ALLOW_REFRESH_TOKEN_AUTH]

  - name: dynamodb-policy-store
    type: dynamodb.Table
    args:
      name: policy-store
      billing_mode: PAY_PER_REQUEST
      hash_key: userId
      attributes:
        - name: userId
          type: S
      tags:
        Name: Policy Store for Authentication

  - name: dynamodb-config-store
    type: dynamodb.Table
    args:
      name: use-case-config-store
      billing_mode: PAY_PER_REQUEST
      hash_key: configId
      attributes:
        - name: configId
          type: S
      tags:
        Name: Use Case Configuration Store

  - name: websocket-api
    type: apigatewayv2.Api
    args:
      name: websocket-api
      protocol_type: WEBSOCKET
      route_selection_expression: "$request.body.action"
      tags:
        Name: WebSocket API

  - name: lambda-authorizer-role
    type: iam.Role
    args:
      assume_role_policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      managed_policy_arns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly

  - name: lambda-authorizer
    type: lambda_.Function
    args:
      name: custom-authorizer
      runtime: nodejs16.x
      handler: index.handler
      code: "s3://secret:deploymentBucket/code/lambda-authorizer.zip"
      environment:
        variables:
          USER_POOL_ID: ref:cognito-user-pool.id
      role: ref:lambda-authorizer-role.arn
      tags:
        Name: Custom Authorizer Lambda

  - name: websocket-authorizer
    type: apigatewayv2.Authorizer
    args:
      api_id: ref:websocket-api.id
      authorizer_type: REQUEST
      authorizer_uri: ref:lambda-authorizer.invoke_arn
      identity_sources: [route.request.header.Authorization]
      name: websocket-authorizer

  - name: sqs-fifo-queue
    type: sqs.Queue
    args:
      name: websocket-app-queue.fifo
      fifo_queue: true
      content_based_deduplication: true
      tags:
        Name: WebSocket FIFO Queue

  - name: lambda-processor-role
    type: iam.Role
    args:
      assume_role_policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      managed_policy_arns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      inline_policies:
        - name: dynamodb-sqs-access
          policy:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                Effect: Allow
                Resource:
                  - ref:dynamodb-policy-store.arn
                  - ref:dynamodb-config-store.arn
              - Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Effect: Allow
                Resource: ref:sqs-fifo-queue.arn
              - Action:
                  - execute-api:ManageConnections
                Effect: Allow
                Resource: "arn:aws:execute-api:${aws:region}:${aws:accountId}:${ref:websocket-api.id}/*"
              
  - name: lambda-processor
    type: lambda_.Function
    args:
      name: processor-lambda
      runtime: nodejs16.x
      handler: index.handler
      code: "s3://secret:deploymentBucket/code/lambda-processor.zip"
      environment:
        variables:
          DYNAMODB_CONFIG_TABLE: ref:dynamodb-config-store.name
          SQS_QUEUE_URL: ref:sqs-fifo-queue.url
          WEBSOCKET_API_ENDPOINT: ref:websocket-api.api_endpoint
      role: ref:lambda-processor-role.arn
      tags:
        Name: Processor Lambda

  - name: lambda-bedrock-role
    type: iam.Role
    args:
      assume_role_policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      managed_policy_arns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      inline_policies:
        - name: bedrock-dynamodb-sqs-access
          policy:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeAgent
                Effect: Allow
                Resource: "*"
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Effect: Allow
                Resource: ref:dynamodb-config-store.arn
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:SendMessage
                Effect: Allow
                Resource: ref:sqs-fifo-queue.arn

  - name: lambda-bedrock
    type: lambda_.Function
    args:
      name: bedrock-agents-lambda
      runtime: python3.9
      handler: index.handler
      code: "s3://secret:deploymentBucket/code/lambda-bedrock.zip"
      environment:
        variables:
          DYNAMODB_CONFIG_TABLE: ref:dynamodb-config-store.name
          SQS_QUEUE_URL: ref:sqs-fifo-queue.url
      role: ref:lambda-bedrock-role.arn
      tags:
        Name: Bedrock Agents Lambda

  - name: sqs-lambda-trigger
    type: lambda_.EventSourceMapping
    args:
      event_source_arn: ref:sqs-fifo-queue.arn
      function_name: ref:lambda-bedrock.arn
      batch_size: 1

  - name: parameter-store-ui-config
    type: ssm.Parameter
    args:
      name: /websocket-app/ui-config
      type: String
      value: secret:uiConfigJson
      tags:
        Name: UI Configuration

  - name: cloudwatch-dashboard
    type: cloudwatch.Dashboard
    args:
      dashboard_name: websocket-app-dashboard
      dashboard_body: >
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${ref:lambda-processor.name}"],
                  ["AWS/Lambda", "Invocations", "FunctionName", "${ref:lambda-bedrock.name}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${aws:region}",
                "title": "Lambda Invocations"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/SQS", "NumberOfMessagesSent", "QueueName", "${ref:sqs-fifo-queue.name}"],
                  ["AWS/SQS", "NumberOfMessagesReceived", "QueueName", "${ref:sqs-fifo-queue.name}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${aws:region}",
                "title": "SQS Messages"
              }
            }
          ]
        }
      tags:
        Name: WebSocket App Dashboard

  - name: websocket-route-connect
    type: apigatewayv2.Route
    args:
      api_id: ref:websocket-api.id
      route_key: "$connect"
      authorization_type: CUSTOM
      authorizer_id: ref:websocket-authorizer.id
      target: "integrations/${ref:websocket-connect-integration.id}"

  - name: websocket-route-disconnect
    type: apigatewayv2.Route
    args:
      api_id: ref:websocket-api.id
      route_key: "$disconnect"
      target: "integrations/${ref:websocket-disconnect-integration.id}"

  - name: websocket-route-message
    type: apigatewayv2.Route
    args:
      api_id: ref:websocket-api.id
      route_key: message
      target: "integrations/${ref:websocket-message-integration.id}"

  - name: websocket-connect-integration
    type: apigatewayv2.Integration
    args:
      api_id: ref:websocket-api.id
      integration_type: AWS_PROXY
      integration_uri: ref:lambda-processor.invoke_arn
      content_handling_strategy: CONVERT_TO_TEXT
      passthrough_behavior: WHEN_NO_MATCH

  - name: websocket-disconnect-integration
    type: apigatewayv2.Integration
    args:
      api_id: ref:websocket-api.id
      integration_type: AWS_PROXY
      integration_uri: ref:lambda-processor.invoke_arn
      content_handling_strategy: CONVERT_TO_TEXT
      passthrough_behavior: WHEN_NO_MATCH

  - name: websocket-message-integration
    type: apigatewayv2.Integration
    args:
      api_id: ref:websocket-api.id
      integration_type: AWS_PROXY
      integration_uri: ref:lambda-processor.invoke_arn
      content_handling_strategy: CONVERT_TO_TEXT
      passthrough_behavior: WHEN_NO_MATCH

  - name: websocket-stage
    type: apigatewayv2.Stage
    args:
      api_id: ref:websocket-api.id
      name: dev
      auto_deploy: true
      tags:
        Name: WebSocket API Dev Stage
